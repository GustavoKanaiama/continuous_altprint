from printable.best_path import *
import shapely as sp
import matplotlib.pyplot as plt
import networkx as nx

"""
o meu.
Closest point:  (118.75, 111.75)

[(91.25, 111.75), (118.75, 111.75), (118.75, 112.25), (91.25, 112.25), (91.25, 112.75), (118.75, 112.75), (118.75, 113.25), (91.25, 113.25), (91.25, 113.75), (118.75, 113.75), (118.75, 114.25), (91.25, 114.25), (91.25, 114.75), (118.75, 114.75), (118.75, 115.25), (91.25, 115.25), (91.25, 115.75), (118.75, 115.75), (118.75, 116.25), (91.25, 116.25), (91.25, 116.75), (118.75, 116.75), (118.75, 117.25), (91.25, 117.25), (91.25, 117.75), (118.75, 117.75), (118.75, 118.25), (91.25, 118.25), (91.25, 118.75), (108.75, 118.75), (108.75, 119.25), (101.25, 119.25), (101.25, 119.75), (108.75, 119.75), (108.75, 120.25), (101.25, 120.25), (101.25, 120.75), (108.75, 120.75), (108.75, 121.25), (101.25, 121.25), (101.25, 121.75), (108.75, 121.75), (108.75, 122.25), (101.25, 122.25), (101.25, 122.75), (108.75, 122.75), (108.75, 123.25), (101.25, 123.25), (101.25, 123.75), (108.75, 123.75), (108.75, 124.25), (101.25, 124.25), (101.25, 124.75), (108.75, 124.75), (108.75, 125.25), (101.25, 125.25), (101.25, 125.75), (108.75, 125.75), (108.75, 126.25), (101.25, 126.25), (101.25, 126.75), (108.75, 126.75), (108.75, 127.25), (101.25, 127.25), (101.25, 127.75), (108.75, 127.75), (108.75, 128.25), (101.25, 128.25), (101.25, 128.75), (108.75, 128.75), (108.75, 129.25), (101.25, 129.25), (101.25, 129.75), (108.75, 129.75), (108.75, 130.25), (101.25, 130.25), (101.25, 130.75), (108.75, 130.75)] 

[(91.25, 111.75), (118.75, 111.75)]

[(91.25, 131.25), (108.75, 131.25)]

[(91.25, 131.75), (118.75, 131.75), (118.75, 132.25), (91.25, 132.25), (91.25, 132.75), (118.75, 132.75), (118.75, 133.25), (91.25, 133.25), (91.25, 133.75), (118.75, 133.75), (118.75, 134.25), (91.25, 134.25), (91.25, 134.75), (118.75, 134.75), (118.75, 135.25), (91.25, 135.25), (91.25, 135.75), (118.75, 135.75), (118.75, 136.25), (91.25, 136.25), (91.25, 136.75), (118.75, 136.75), (118.75, 137.25), (91.25, 137.25), (91.25, 137.75), (118.75, 137.75), (118.75, 138.25), (91.25, 138.25), (91.25, 138.75), (108.75, 138.75), (108.75, 139.25), (101.25, 139.25), (101.25, 139.75), (108.75, 139.75), (108.75, 140.25), (101.25, 140.25), (101.25, 140.75), (108.75, 140.75), (108.75, 141.25), (101.25, 141.25), (101.25, 141.75), (108.75, 141.75), (108.75, 142.25), (101.25, 142.25), (101.25, 142.75), (108.75, 142.75), (108.75, 143.25), (101.25, 143.25), (101.25, 143.75), (108.75, 143.75), (108.75, 144.25), (101.25, 144.25), (101.25, 144.75), (108.75, 144.75), (108.75, 145.25), (101.25, 145.25), (101.25, 145.75), (108.75, 145.75), (108.75, 146.25), (101.25, 146.25), (101.25, 146.75), (108.75, 146.75), (108.75, 147.25), (101.25, 147.25), (101.25, 147.75), (108.75, 147.75), (108.75, 148.25), (101.25, 148.25), (101.25, 148.75), (108.75, 148.75)]

[(91.25, 111.25), (108.75, 111.25)]

[(101.25, 101.25), (108.75, 101.25), (108.75, 101.75), (101.25, 101.75), (101.25, 102.25), (108.75, 102.25), (108.75, 102.75), (101.25, 102.75), (101.25, 103.25), (108.75, 103.25), (108.75, 103.75), (101.25, 103.75), (101.25, 104.25), (108.75, 104.25), (108.75, 104.75), (101.25, 104.75), (101.25, 105.25), (108.75, 105.25), (108.75, 105.75), (101.25, 105.75), (101.25, 106.25), (108.75, 106.25), (108.75, 106.75), (101.25, 106.75), (101.25, 107.25), (108.75, 107.25), (108.75, 107.75), (101.25, 107.75), (101.25, 108.25), (108.75, 108.25), (108.75, 108.75), (101.25, 108.75), (101.25, 109.25), (108.75, 109.25), (108.75, 109.75), (101.25, 109.75), (101.25, 110.25), (108.75, 110.25), (108.75, 110.75), (101.25, 110.75), (101.25, 111.25)]
"""


"""
correto.
(118.75, 111.75)
[(91.25, 131.25), (108.75, 131.25)]

[(91.25, 131.75), (118.75, 131.75), (118.75, 132.25), (91.25, 132.25), (91.25, 132.75), (118.75, 132.75), (118.75, 133.25), (91.25, 133.25), (91.25, 133.75), (118.75, 133.75), (118.75, 134.25), (91.25, 134.25), (91.25, 134.75), (118.75, 134.75), (118.75, 135.25), (91.25, 135.25), (91.25, 135.75), (118.75, 135.75), (118.75, 136.25), (91.25, 136.25), (91.25, 136.75), (118.75, 136.75), (118.75, 137.25), (91.25, 137.25), (91.25, 137.75), (118.75, 137.75), (118.75, 138.25), (91.25, 138.25), (91.25, 138.75), (108.75, 138.75), (108.75, 139.25), (101.25, 139.25), (101.25, 139.75), (108.75, 139.75), (108.75, 140.25), (101.25, 140.25), (101.25, 140.75), (108.75, 140.75), (108.75, 141.25), (101.25, 141.25), (101.25, 141.75), (108.75, 141.75), (108.75, 142.25), (101.25, 142.25), (101.25, 142.75), (108.75, 142.75), (108.75, 143.25), (101.25, 143.25), (101.25, 143.75), (108.75, 143.75), (108.75, 144.25), (101.25, 144.25), (101.25, 144.75), (108.75, 144.75), (108.75, 145.25), (101.25, 145.25), (101.25, 145.75), (108.75, 145.75), (108.75, 146.25), (101.25, 146.25), (101.25, 146.75), (108.75, 146.75), (108.75, 147.25), (101.25, 147.25), (101.25, 147.75), (108.75, 147.75), (108.75, 148.25), (101.25, 148.25), (101.25, 148.75), (108.75, 148.75)]      

[(91.25, 111.25), (108.75, 111.25)]

[(91.25, 111.75), (118.75, 111.75), (118.75, 112.25), (91.25, 112.25), (91.25, 112.75), (118.75, 112.75), (118.75, 113.25), (91.25, 113.25), (91.25, 113.75), (118.75, 113.75), (118.75, 114.25), (91.25, 114.25), (91.25, 114.75), (118.75, 114.75), (118.75, 115.25), (91.25, 115.25), (91.25, 115.75), (118.75, 115.75), (118.75, 116.25), (91.25, 116.25), (91.25, 116.75), (118.75, 116.75), (118.75, 117.25), (91.25, 117.25), (91.25, 117.75), (118.75, 117.75), (118.75, 118.25), (91.25, 118.25), (91.25, 118.75), (108.75, 118.75), (108.75, 119.25), (101.25, 119.25), (101.25, 119.75), (108.75, 119.75), (108.75, 120.25), (101.25, 120.25), (101.25, 120.75), (108.75, 120.75), (108.75, 121.25), (101.25, 121.25), (101.25, 121.75), (108.75, 121.75), (108.75, 122.25), (101.25, 122.25), (101.25, 122.75), (108.75, 122.75), (108.75, 123.25), (101.25, 123.25), (101.25, 123.75), (108.75, 123.75), (108.75, 124.25), (101.25, 124.25), (101.25, 124.75), (108.75, 124.75), (108.75, 125.25), (101.25, 125.25), (101.25, 125.75), (108.75, 125.75), (108.75, 126.25), (101.25, 126.25), (101.25, 126.75), (108.75, 126.75), (108.75, 127.25), (101.25, 127.25), (101.25, 127.75), (108.75, 127.75), (108.75, 128.25), (101.25, 128.25), (101.25, 128.75), (108.75, 128.75), (108.75, 129.25), (101.25, 129.25), (101.25, 129.75), (108.75, 129.75), (108.75, 130.25), (101.25, 130.25), (101.25, 130.75), (108.75, 130.75)] 

[(101.25, 101.25), (108.75, 101.25), (108.75, 101.75), (101.25, 101.75), (101.25, 102.25), (108.75, 102.25), (108.75, 102.75), (101.25, 102.75), (101.25, 103.25), (108.75, 103.25), (108.75, 103.75), (101.25, 103.75), (101.25, 104.25), (108.75, 104.25), (108.75, 104.75), (101.25, 104.75), (101.25, 105.25), (108.75, 105.25), (108.75, 105.75), (101.25, 105.75), (101.25, 106.25), (108.75, 106.25), (108.75, 106.75), (101.25, 106.75), (101.25, 107.25), (108.75, 107.25), (108.75, 107.75), (101.25, 107.75), (101.25, 108.25), (108.75, 108.25), (108.75, 108.75), (101.25, 108.75), (101.25, 109.25), (108.75, 109.25), (108.75, 109.75), (101.25, 109.75), (101.25, 110.25), (108.75, 110.25), (108.75, 110.75), (101.25, 110.75), (101.25, 111.25)]
"""











"""
list1 = [[(90.25, 139.75), (100.25, 139.75), (119.75, 139.75),  (109.75, 110.25), (109.75, 100.25), (100.25, 100.25)],
         [(90.75, 139.25), (100.75, 139.25), (100.75, 149.25),  (119.25, 139.25), (119.25, 130.75), (109.25, 130.75)]]
print(list1[0])
print()
print(list1[1])
print()
print()
print(searchAndSplit(list1, (90.75, 139.25)))
print()
#print(sp.LineString([(109.25, 130.75)]))



list2 = [(108.75, 118.75), (108.75, 111.25), (109.25, 111.25)]
list3 = [(109.25, 118.75), (109.75, 118.75), (109.75, 111.25)]



edge_list = [("Pi", "P1'", 1), ("Pi", "P1''", 1),
             ("P", "P1'", 1), ("P", "P1''", 1), ("P", "P2", 5), ("P", "P2'", 12),
             ("P1'", "P1''", 4), ("P1'", "P2", 5), ("P1'", "P2'", 10),
             ("P1''", "P2", 10), ("P1''", "P2'", 12),
             ("P2", "P2'", 1)]

G = nx.Graph()
G.add_weighted_edges_from(edge_list)

pos = nx.shell_layout(G)
nx.draw_networkx(G,pos, node_size=600)

labels = nx.get_edge_attributes(G,'weight')

nx.draw_networkx_edge_labels(G,pos,edge_labels=labels)

path = nx.single_source_shortest_path(G, "Pi")
print(path)

plt.show()

"""